#include <algorithm>
#include <iostream>
#include <vector>
#include "circle.h"
#include "triangle.h"
#include "CVector2D.h"
#include "IFigure.h"

using namespace std;

enum Commands
{
    ADD = 1,
    SUM_PERIMETERS,
    SUM_AREAS,
    CENTRE_MASS,
 
};
enum Figure
{
    CIRCLE = 1,
    TRIANGLE = 2,
};

int main() {
    vector<IFigure* > system;
    int command;
    double x, y, sumP, sumS, massAll;
    CVector2D centerMass;
    while(true) {
        cout << "1. Add figure " << endl;
        cout << "2. Show all figures" << endl;
        cout << "3. Sum all perimeters" << endl;
        cout << "4. Sum all areas" << endl;
        cout << "5. System weight center" << endl;
        cout << "Add command: ";
        cin >> command;
        cout << endl;
        switch (command) {
            case ADD:
                cout << "\t1. Circle" << endl;
                cout << "\t2. Triangle" << endl;
                cout << "\tAdd command: ";
                cin >> command;
                cout << endl;
                switch (command)
                {
                    case CIRCLE:
                        system.push_back(new Circle());
                        break;
                    case TRIANGLE:
                        system.push_back(reinterpret_cast<IFigure *const>(new Triangle()));
                        break;
                    default:
                        cout << "\tFigure not found" << endl;
                        break;
                }
                break;
            case SUM_PERIMETERS:
                sumP = 0;
                for (auto& figure : system)
                    sumP += figure->perimeter();
                cout << "Perimeter system: " << sumP << endl;
                cout << endl;
                break;
            case SUM_AREAS:
                sumS = 0;
                for (auto& figure : system)
                    sumS += figure->square();
                cout <<"Area system: " << sumS << endl;
                cout << endl;
                break;
            case CENTRE_MASS:
                massAll = 0;
                x = 0;
                y = 0;
                for (auto& figure : system) {
                    x += figure->position().x * figure->mass();
                    y += figure->position().y * figure->mass();
                    massAll += figure->mass();
                }
                centerMass.x = x / massAll;
                centerMass.y = y / massAll;
                cout << "Center weight coords: " << centerMass << endl;
                cout << endl;
                break;
        }
    }
}
